"use strict"; ang.controller("AppCtrl", ["$scope", "$ionicModal", "$timeout", "$ionicActionSheet", "$rootScope", "Users", "Plugins", "$ionicPopup", "$ionicLoading", "Config", "$ionicScrollDelegate", "$http", "CrudPlugin", "$ionicSideMenuDelegate", "$ionicHistory", "DiceRoll", function (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) { function q(b) { a.config && a.config.vibrate && navigator.vibrate(b) } function u(b) { try { i.show({ template: "Carregando Personagens..." }), f.returnUsers().then(function (c) { a.users = c, a.$digest(), i.hide(), "" == a.user.id && (b && n.toggleLeft(), q(100)) }, function (b) { i.hide(), console.log(b), a.users = [], n.toggleLeft() }) } catch (a) { r(a) } } function v(b) { var c = new Promise(function (c, d) { b ? z().then(function (b) { y().then(function (b) { j.getTabelaElementos().then(function (b) { a.listapericias = b.sort(function (a, b) { return a.nome < b.nome ? -1 : a.nome > b.nome ? 1 : 0 }), c(!0) }, function (b) { a.listapericias = b, d(!1) }) }).catch(function (a) { d(a) }) }) : void 0 == a.listadesvantagens || a.listadesvantagens.length <= 0 ? z().then(function (b) { y().then(function (b) { j.getTabelaElementos().then(function (b) { a.listapericias = b.sort(function (a, b) { return a.nome < b.nome ? -1 : a.nome > b.nome ? 1 : 0 }), c(!0) }, function (b) { a.listapericias = b, d(!1) }) }).catch(function (a) { d(a) }) }) : void 0 == a.listavantagens || a.listavantagens.length <= 0 ? y().then(function (b) { j.getTabelaElementos().then(function (b) { a.listapericias = b.sort(function (a, b) { return a.nome < b.nome ? -1 : a.nome > b.nome ? 1 : 0 }), c(!0) }, function (b) { a.listapericias = b, d(!1) }) }).catch(function (a) { d(a) }) : (a.listapericias = a.listapericias.length <= 0) ? j.getTabelaElementos().then(function (b) { a.listapericias = b.sort(function (a, b) { return a.nome < b.nome ? -1 : a.nome > b.nome ? 1 : 0 }), c(!0) }, function (b) { a.listapericias = b, d(!1) }) : c(!0) }); return c } function x(b) { var c = new Promise(function (b, c) { m.Crud.ExecuteQueryConsulta({ query: "select * from tbpericias", args: [] }).then(function (c) { a.listapericias = c.sort(function (a, b) { return a.nome < b.nome ? -1 : a.nome > b.nome ? 1 : 0 }), b() }, function (a) { console.log(a), c() }) }); return c } function y() { var b = new Promise(function (b, c) { m.Crud.ExecuteQueryConsulta({ query: "select * from tbvantagens", args: [] }).then(function (c) { a.listavantagens = c.sort(function (a, b) { return a.nome < b.nome ? -1 : a.nome > b.nome ? 1 : 0 }), b(!0) }).catch(function (a) { c(a) }) }); return b } function z() { var b = new Promise(function (b, c) { m.Crud.ExecuteQueryConsulta({ query: "select * from tbdesvantagens", args: [] }).then(function (c) { a.listadesvantagens = c.sort(function (a, b) { return a.nome < b.nome ? -1 : a.nome > b.nome ? 1 : 0 }), b(!0) }).catch(function (a) { c(a) }) }); return b } g.Sql.InitCharge(), a.pericianova = { tipo: "", nome: "", nh: "", custo: "" }, u(!0), a.user = f.getUser(), a.vantagem = {}, a.desvantagem = {}, a.pericia = {}, j.Config().then(function (b) { a.config = b, console.log(b) }, function (a) { console.log(a) }); var r = function (a) { h.alert({ title: "Informação", template: a }) }, s = j.windowConfig; a.windowConfig = s, a.listapericias = [], a.listavantagens = [], a.listadesvantagens = []; var t = function () { var b = document.getElementById("myCanvas"); if (b) { b = b.getContext("2d"); var c = document.createElement("img"); c.src = ""; var d = s.screenResolution.getIdealw(), e = s.screenResolution.getIdealh(); b.clearRect(0, 0, d, e) } if (b = document.getElementById("myCanvas2").getContext("2d")) { var d = j.windowConfig.screenResolution.getIdealw(), e = j.windowConfig.screenResolution.getIdealh(); b.clearRect(0, 0, d, e) } a.pericia.nome = "", a.desvantagem.nome = "", a.vantagem.nome = "", a.user = f.getUser(), q(100) }; b.fromTemplateUrl("templates/sobre.html", { scope: a }).then(function (b) { a.modal = b }), b.fromTemplateUrl("templates/novo.html", { scope: a }).then(function (b) { a.user = f.getUser(), a.novo = b, a.imgurl = "" }), b.fromTemplateUrl("templates/cadpericias.html", { scope: a }).then(function (b) { a.cadastros = b }), b.fromTemplateUrl("templates/cadvantagem.html", { scope: a }).then(function (b) { a.cadvantagem = b }), b.fromTemplateUrl("templates/caddesvantagem.html", { scope: a }).then(function (b) { a.caddesvantagem = b }), b.fromTemplateUrl("templates/config.html", { scope: a }).then(function (b) { a.configuracoes = b }), b.fromTemplateUrl("templates/Dice.html", { scope: a }).then(function (b) { a.dice = b }), a.closeLogin = function () { a.modal.hide() }, a.closeModal = function (b) { var c = document.getElementById("myCanvas"); if (c) { c = c.getContext("2d"); var d = s.screenResolution.getIdealw(), e = s.screenResolution.getIdealh(); c.clearRect(0, 0, d, e) } a.listapericias = [], a.listavantagens = [], a.listadesvantagens = [], "novo" == b ? (a.user = f.getUser(), a.novo.hide(), q(100)) : "sobre" == b ? (a.user = f.getUser(), a.modal.hide(), q(100)) : "configuracoes" == b ? (a.configuracoes.hide(), q(100)) : "cadastros" == b ? (a.cadastros.hide(), q(100)) : "vantagens" == b ? (a.cadvantagem.hide(), q(100)) : "desvantagens" == b ? (a.caddesvantagem.hide(), q(100)) : "equipamentos" == b ? (a.equipamentos.hide(), q(100)) : "tools" == b && (a.dice.hide(), q(100)) }, a.action = function () { d.show({ buttons: [{ text: '<span class="ion-person-add positive biggo"></span>  <span class="positive">Novo Personagem</span> ' }, { text: '<span class="ion-settings positive biggo"></span> <span class="positive">Ferramentas</span>' }, { text: '<span class="ion-gear-b positive biggo"></span> <span class="positive">Configurações</span> ' }, { text: '<span class="ion-plus-circled positive biggo"></span> <span class="positive">Pericias</span> ' }, { text: '<span class="ion-plus-circled positive biggo"></span> <span class="positive">Vantagens</span> ' }, { text: '<span class="ion-plus-circled positive biggo"></span> <span class="positive">Desvantages</span> ' }, { text: '<span class="ion-information-circled positive biggo"></span> <span class="positive">Sobre</span>' }], titleText: '<span style="text-align:center" class="ion-ios-settings-strong assertive biggo"> Opções</span>', buttonClicked: function (b) { if (k.scrollTop(), 0 == b) { if (t(), a.config.firstRun) { h.alert({ title: "First Run", template: "Atenção, não esqueça de personalizar vantagens/desvantagens que  contém itens que podem variar o custo de acordo com nt/narrador critérios!" }); return a.config.firstRun = !1, void a.updateConfig(a.config) } i.show({ template: "Atualizando tabelas..." }), a.novo.show().then(function () { v(!1).then(function () { i.hide(), a.editando = !1 }) }) } return 1 == b && a.dice.show(), 2 == b && (j.Config().then(function (b) { a.config = b, a.lblCamQuality = j.Util.getLabelQualityFoto(a.config.quality) }, function (a) { console.log(a) }), a.configuracoes.show()), 3 == b && (i.show({ template: "Atualizando tabelas..." }), a.cadastros.show().then(function () { x(!1).then(function (b) { i.hide(), a.listavantagens = [], a.listadesvantagens = [], a.pericianova.nome = "" }, function () { a.cadastros.show() }) })), 4 == b && (i.show({ template: "Atualizando tabelas..." }), a.cadvantagem.show().then(function () { y().then(function () { a.listadesvantagens = [], a.listapericias = [], i.hide() }).catch(function () { i.hide(), console.log("fuuuu") }) })), 5 == b && (i.show({ template: "Atualizando tabelas..." }), a.caddesvantagem.show().then(function () { z().then(function () { i.hide() }).catch(function (a) { i.hide(), console.log("fuuuu: " + a) }) })), 6 == b && a.modal.show(), !0 } }) }, a.eventoclick = function (a) { e.$emit("someEvent", a) }; var w = function (a) { for (var b = 0, c = a.length - 1; c >= 0; c--) b += parseInt(a[c].custo); return b }; a.addVantagem = function (b) { a.user.vantagens = a.user.vantagens || []; var c = a.user.vantagens.search({ key: "nome", value: b.nome }); c || (a.user.vantagens.unshift({ nome: b.nome, custo: b.custo, plus: 0 }), a.labelVantagemTotal = w(a.user.vantagens), q(100)) }, a.addDesvantagem = function (b) { a.user.desvantagens = a.user.desvantagens || []; var c = a.user.desvantagens.search({ key: "nome", value: b.nome }); c || (a.user.desvantagens.unshift({ nome: b.nome, custo: b.custo, plus: 0 }), a.labelDesVantagemTotal = w(a.user.desvantagens), q(100)) }, a.removeVantagem = function (b) { a.user.vantagens.remove({ key: "nome", value: b.nome }), a.labelVantagemTotal = w(a.user.vantagens), q(100) }, a.removeDesvantagem = function (b) { a.user.desvantagens.remove({ key: "nome", value: b.nome }), a.labelDesVantagemTotal = w(a.user.desvantagens), q(100) }, a.addPericia = function (b) { a.user.pericias = a.user.pericias || []; var c = a.user.pericias.search({ key: "nome", value: b.nome }); c || (a.user.pericias.unshift({ nome: b.nome, nh: b.nh, custo: b.custo, plus: 0 }), q(100)) }, a.removePericia = function (b) { a.user.pericias.remove({ key: "nome", value: b.nome }), q(100) }, a.clearForm = function () { a.user = f.getUser(), q(100) }, a.salvar = function () { if (a.user) { if (!a.user.nome || void 0 == a.user.nome || "" == a.user.nome) return q(100), void r("Escolha o nome do personagem."); if (!a.imgurl || void 0 == a.imgurl) return q(100), void r("Escolha a imagem do personagem."); if (a.config.simetria) { var b = parseInt(w(a.user.vantagens)), c = parseInt(w(a.user.desvantagens)); if (c *= -1, b != c) return void r("A configuração atual exige simetria das vantagens com as desvantagens.") } i.show({ template: "Aguarde..." }), a.users = a.users || [], a.users.unshift(a.user), a.user.img = a.imgurl, a.user.atributos.von = a.user.atributos.dx, a.user.atributos.pf = a.user.atributos.ht, a.user.atributos.per = a.user.atributos.iq, a.user.atributos.pv = a.user.atributos.st, a.user.__atributos.st = a.user.atributos.st, a.user.__atributos.dx = a.user.atributos.dx, a.user.__atributos.iq = a.user.atributos.iq, a.user.__atributos.ht = a.user.atributos.ht, a.user.__atributos.von = a.user.atributos.dx, a.user.__atributos.pf = a.user.atributos.ht, a.user.__atributos.per = a.user.atributos.iq, a.user.__atributos.pv = a.user.atributos.st; var d = f.returnUserToSave(a.user); g.Sql.executeQuery(d), i.hide(), u(!1), a.novo.hide(function () { a.config.firsRun = !1, q(100) }) } else h.alert({ title: "Informação", template: "Campo nome obrigatório." }) }, a.editarRegistro = function () { a.user.img = a.imgurl; var b = f.returnUserToSave(a.user); g.Sql.executeQueryUpdate(b, a.user.id), u(!1), a.novo.hide(function () { q(100) }) }, a.excluir = function () { q(100); var b = h.confirm({ title: "Exclusão de personagem", template: "Quer mesmo excluir este personagem?" }); b.then(function (b) { b && (g.Sql.executeQueryExcluir(a.user.id), f.returnUsers().then(function (b) { a.users = b, a.$digest(), i.hide(), a.novo.hide() }, function (b) { i.hide(), console.log(b), a.users = [], a.novo.hide() })) }) }, a.limpar = function () { a.user = f.getUser(), q(100) }, a.pic = function () { i.show({ template: "Aguarde..." }); var b = 0; a.config && (b = a.config.camera_galeria ? 1 : 0), navigator.camera.getPicture(function (c) { var d = document.createElement("img"), e = "data:image/jpeg;base64," + c, f = s.screenResolution.getIdealw(), g = s.screenResolution.getIdealh(); d.src = e, a.imgurl = e, d.onload = function () { var a = document.getElementById("myCanvas").getContext("2d"); a.drawImage(this, 0, 0, f, g), i.hide() } }, function (b) { console.log(b), i.hide() }, { quality: a.config.quality, encodingType: Camera.EncodingType.JPEG, destinationType: Camera.DestinationType.DATA_URL, sourceType: b, correctOrientation: !1, allowEdit: !1 }) }, e.$on("eventoEditar", function (b, c) { i.show({ template: "Carregando Personagem..." }); var d = document.getElementById("myCanvas"); d && d.focus(), v(!1).then(function () { a.editando = !0, n.toggleLeft(), k.scrollTop(), a.novo.show(), a.user = c; var b = document.createElement("img"), d = c.img; b.src = d, i.hide(), a.imgurl = d, b.onload = function () { var a = document.getElementById("myCanvas").getContext("2d"), b = s.screenResolution.getIdealw(), c = s.screenResolution.getIdealh(); a.drawImage(this, 0, 0, b, c), this.src = "" } }) }), a.updateConfig = function (b) { a.lblCamQuality = j.Util.getLabelQualityFoto(a.config.quality), j.SetConfig(JSON.stringify(b)), q(100) }, a.resetDados = function (b) { q(100); var c = h.confirm({ title: "Reset de dados", template: "Todos os personagens e pericias/vantagens/desvantagens serão apagados, a app ficará como da 1ª vez que instalou, deseja continuar?" }); c.then(function (b) { if (b) { try { g.Sql.resetGeral().then(function (a) { t(), u(!1); var b = document.getElementById("viewkey"); b && (b.style.display = "none") }) } catch (a) { console.log(a) } a.configuracoes.hide() } else a.config.reset = b }) }, a.fill = function (b) { a.addPericia(b) }, a.criarPericias = function (b) { var c = window.sqlitePlugin.openDatabase({ name: "gurps.db", location: "default" }); c.transaction(function (d) { i.show({ template: "Atualizando..." }); try { c.executeSql("INSERT INTO tbpericias(data) VALUES (?)", [JSON.stringify(b)], function (c) { b.id = c.insertId, a.listapericias.unshift(b), i.hide(function () { q(100) }) }) } catch (a) { i.hide(), console.log(a) } }) }, a.removerPericia = function (b) { q(100), event.stopPropagation(); var c = h.confirm({ title: "Remover Pericia?", template: "Deseja realmente remover esta pericia?" }); c.then(function (c) { if (c) { var d = window.sqlitePlugin.openDatabase({ name: "gurps.db", location: "default" }); d.transaction(function (c) { c.executeSql("delete from tbpericias where id = ?", [b.id]), a.listapericias.remove({ key: "nome", value: b.nome }), q(100), a.$digest() }) } }) }, a.editandoPericia = function (b) { a.periciaeditando = b, a.editandopericia = !0 }, a.cancelarEditandoPericia = function () { a.editandopericia = !1 }, a.atualizarPericia = function () { a.cancelarEditandoPericia(); var b = window.sqlitePlugin.openDatabase({ name: "gurps.db", location: "default" }); b.transaction(function (b) { b.executeSql("update tbpericias set data=? where id=?", [JSON.stringify(a.periciaeditando), a.periciaeditando.id]) }, function (a) { console.log("Transaction ERROR: " + error.message) }, function () { console.log("Update na tbpericias OK") }) }, a.criarVantagem = function (b) { var c = window.sqlitePlugin.openDatabase({ name: "gurps.db", location: "default" }); c.transaction(function (d) { i.show({ template: "Atualizando..." }); try { c.executeSql("INSERT INTO tbvantagens(data) VALUES (?)", [JSON.stringify(b)], function (c) { b.id = c.insertId, b.tipo = "vantagem", a.listavantagens.unshift(b), q(100), i.hide() }) } catch (a) { i.hide(), console.log(a) } }) }, a.editandoVantagem = function (b) { b.custo = parseInt(b.custo), a.vantagemnovaeditando = b, a.editandovantagem = !0 }, a.atualizarVantagem = function () { a.cancelarEditandoVantagem(); var b = window.sqlitePlugin.openDatabase({ name: "gurps.db", location: "default" }); b.transaction(function (b) { b.executeSql("update tbvantagens set data=? where id=?", [JSON.stringify(a.vantagemnovaeditando), a.vantagemnovaeditando.id]) }, function (a) { console.log("Transaction ERROR: " + error.message) }, function () { console.log("Update na vantagemnovaeditando OK") }) }, a.removerVantagem = function (b) { q(100), event.stopPropagation(); var c = h.confirm({ title: "Remover Vantagem?", template: "Deseja realmente remover esta vantagem?" }); c.then(function (c) { if (c) { var d = window.sqlitePlugin.openDatabase({ name: "gurps.db", location: "default" }); d.transaction(function (c) { c.executeSql("delete from tbvantagens where id = ?", [b.id]), a.listavantagens.remove({ key: "nome", value: b.nome }), q(100), a.$digest() }) } }) }, a.cancelarEditandoVantagem = function () { a.editandovantagem = !1 }, a.editandoDesvantagem = function (b) { b.custo = parseInt(b.custo), a.desvantagemnovaeditando = b, a.editandodesvantagem = !0 }, a.cancelarEditandodesVantagem = function () { a.editandodesvantagem = !1 }, a.atualizardesVantagem = function () { a.cancelarEditandodesVantagem(); var b = window.sqlitePlugin.openDatabase({ name: "gurps.db", location: "default" }); b.transaction(function (b) { b.executeSql("update tbdesvantagens set data=? where id=?", [JSON.stringify(a.desvantagemnovaeditando), a.desvantagemnovaeditando.id]) }, function (a) { console.log("Transaction ERROR: " + error.message) }, function () { console.log("Update na vantagemnovaeditando OK") }) }, a.criardesVantagem = function (b) { var c = window.sqlitePlugin.openDatabase({ name: "gurps.db", location: "default" }); c.transaction(function (d) { i.show({ template: "Atualizando..." }); try { c.executeSql("INSERT INTO tbdesvantagens(data) VALUES (?)", [JSON.stringify(b)], function (c) { b.id = c.insertId, b.tipo = "desvantagem", a.listadesvantagens.unshift(b), q(100), i.hide() }) } catch (a) { i.hide(), console.log(a) } }) }, a.removerDesvantagem = function (b) { q(100); var c = h.confirm({ title: "Remover Desvantagem?", template: "Deseja realmente remover esta desvantagem?" }); c.then(function (c) { if (c) { var d = window.sqlitePlugin.openDatabase({ name: "gurps.db", location: "default" }); d.transaction(function (c) { c.executeSql("delete from tbdesvantagens where id = ?", [b.id]), a.listadesvantagens.remove({ key: "nome", value: b.nome }), q(100), a.$digest() }) } }) }, a.contato = function () { window.plugins.socialsharing.shareViaEmail("", "Gmobi", ["contato@aldocosta.com.br"], null, null, null, function () { }, function () { }) }, a.rolarDados = function (b) { a.d6Result = p.DiceRoll.D6.rollD6(b) } }]);